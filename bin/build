#!/bin/bash

#/ NAME
#/     build -- builds macports, ports
#/           -- builds static site using jekyll
#/
#/ SYNOPSIS
#/     build macports|ports
#/     build site

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"
require 'profile'

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing component(s)"
    exit 1
  fi

  local nm_component
  for nm_component in "$@"; do
    cd $shome
    case "$nm_component" in 
      macports)
        build_macports
        ;;
      ports)
        build_ports
        ;;
      xmonad)
        build_xmonad
        ;;
      virtualbox)
        build_virtualbox
        ;;
      site)
        build_jekyll
        ;;
      *)
        logger_fatal "don't know how to build ${nm_component}"
        exit 1
        ;;
    esac
  done
}

function build_macports {
  rm -rf $shome/macports
  (cd $shome && git checkout macports)

  if [[ "$FLAGS_reset" = "$FLAGS_TRUE" ]]; then
    rm -rf $shome/_local
    (cd $shome && git checkout _local)
  fi

  local template
  for template in $(find $MACPORTS_ROOT/local/etc/macports/ -name '*.template'); do
    perl -pe 's{\$\$\$MACPORTS_ROOT\$\$\$}{$ENV{"MACPORTS_ROOT"}}eg' "$template" > "${template%.template}"
  done

  cd $MACPORTS_ROOT/macports
  ./configure --prefix="$MACPORTS_ROOT/_local" --with-install-user=$(id -u -n) --with-install-group=$(id -g -n) --with-no-root-privileges
  make -j "$FLAGS_cpus"
  make install
  hash -r
}

function build_ports {
  local cmd_port="port"

  if [[ "$FLAGS_binary" = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -b"
  fi

  if [[ "$FLAGS_source " = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -s"
  fi

  # macports
  "$cmd_port" install gcc_select
  "$cmd_port" install apple-gcc42
  port 'select' gcc apple-gcc42
  "$cmd_port" install tcl +threads

  # utilities
  "$cmd_port" install figlet wget curl rsync
  "$cmd_port" install watch unrar
  "$cmd_port" install nmap htop
  "$cmd_port" install links
  "$cmd_port" install tcp_wrappers openssh

  # dev languages
  "$cmd_port" install python27 py-distribute
  "$cmd_port" install ruby rb-rubygems
  gem install bundler
  "$cmd_port" install erlang +ssl
  port 'select' python python27

  "$cmd_port" install libyaml

  # dev scm
  "$cmd_port" install mercurial bzr

  # databases
  "$cmd_port" install mysql5 mysql_select

  # dev editors, terminals
  "$cmd_port" install emacs +gtk +x11
  "$cmd_port" install vim +x11 +ruby
  "$cmd_port" install macvim +ruby
  "$cmd_port" install iterm2 
  "$cmd_port" install gitx

  # chat
  "$cmd_port" install irssi 

  # secrets
  "$cmd_port" install gnupg gpg-agent 

  # control
  "$cmd_port" install runit daemontools
  "$cmd_port" install tmux

  # linking
  "$cmd_port" install tnef
  "$cmd_port" install imagemagick

  # x11
  "$cmd_port" install xinit
  "$cmd_port" install xorg-server xmodmap xsetroot xterm
  "$cmd_port" install xv xpdf xprop xwininfo xdotool
}

function build_xmonad {
  local cmd_port="port"

  if [[ "$FLAGS_binary" = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -b"
  fi

  if [[ "$FLAGS_source " = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -s"
  fi

  if [[ "$FLAGS_clean" = "$FLAGS_TRUE" ]]; then
    rm -rf ~/.ghc ~/.cabal
  fi

  if [[ "$FLAGS_ghc" = "$FLAGS_TRUE" ]]; then
    local tmp_ghc="$(mktemp -d -t XXXXXXXXX)"
    tar xvfz "ghc-7.4.2-src.tar.bz2" -C "$tmp_ghc"
    pushd "$tmp_ghc/ghc-7.4.2"
    ./configure --prefix=$MACPORTS_ROOT/_local --with-iconv-includes=$MACPORTS_ROOT/_local/include --with-iconv-libraries=$MACPORTS_ROOT/_local/lib
    make -j "$FLAGS_cpus" || make -j "$FLAGS_cpus"
    make install
    popd
    rm -rf "$tmp_ghc"
  fi

  local tmp_cabal="$(mktemp -d -t XXXXXXXXX)"
  tar xvfz "cabal-install-0.14.0.tar.gz" -C "$tmp_cabal"
  pushd "$tmp_cabal/cabal-install-0.14.0"
  PATH="$HOME/.cabal:$PATH"
  bash bootstrap.sh 
  cabal update
  cabal install xmonad-0.10
  cabal install xmonad-contrib-0.10
  cabal install xmobar-0.15
  popd
  rm -rf "$tmp_cabal"
}

function build_virtualbox {
  local cmd_port="port"

  if [[ "$FLAGS_binary" = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -b"
  fi

  if [[ "$FLAGS_source " = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -s"
  fi

  "$cmd_port" install mtools
  "$cmd_port" install rdesktop
  "$cmd_port" install cdrtools
  "$cmd_port" install squid +openssl
}

# build the site with jekyll
function build_jekyll {
  export BUNDLE_GEMFILE="$shome/.doc/Gemfile"

  cd $shome/site
  bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }
  bundle exec jekyll
}

# define command line options:
#   var name, default, description, short option
DEFINE_string 'cpus' '2' 'number of cpus in make' 'n'
DEFINE_boolean 'clean' "$FLAGS_FALSE" 'delete cabal, ghc build directories' 'c'
DEFINE_boolean 'update' "$FLAGS_FALSE" 'update cabal' 'u'
DEFINE_boolean 'source' "$FLAGS_FALSE" 'binary macports only' 's'
DEFINE_boolean 'binary' "$FLAGS_FALSE" 'source macports only' 'b'
DEFINE_boolean 'reset' "$FLAGS_FALSE" 'reset macports ports' 'r'
DEFINE_boolean 'ghc' "$FLAGS_TRUE" 'build ghc' 'G'

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
