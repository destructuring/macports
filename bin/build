#!/bin/bash

#/ NAME
#/     build -- builds macports, ports
#/           -- builds static site using jekyll
#/
#/ SYNOPSIS
#/     build macports|ports
#/     build site

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"
require 'profile'

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing component(s)"
    exit 1
  fi

  local nm_component
  for nm_component in "$@"; do
    cd $shome
    case "$nm_component" in 
      macports)
        build_macports
        ;;
      ports)
        build_ports
        ;;
      xmonad)
        build_xmonad
        ;;
      virtualbox)
        build_virtualbox
        ;;
      site)
        build_jekyll
        ;;
      *)
        logger_fatal "don't know how to build ${nm_component}"
        exit 1
        ;;
    esac
  done
}

function build_macports {
  rm -rf $shome/macports
  (cd $shome && git checkout macports)

  if [[ "$FLAGS_clean" = "$FLAGS_TRUE" ]]; then
    rm -rf $shome/local
    (cd $shome && git checkout local)
    hash -r
  fi

  export MACPORTS="$FLAGS_install"

  export MACPORTS_BUILD="$shome"
  local template
  for template in $(find $shome/etc -name '*.template'); do
    perl -pe 's{\$\$\$MACPORTS\$\$\$}{$ENV{"MACPORTS"}}eg; s{\$\$\$MACPORTS_BUILD\$\$\$}{$ENV{"MACPORTS_BUILD"}}eg' "$template" > "${template%.template}"
  done
  unset MACPORTS_BUILD

  cd $shome/macports
  ./configure --prefix="$MACPORTS" --with-install-user=$(id -u -n) --with-install-group=$(id -g -n) --with-no-root-privileges
  make -j "$FLAGS_cpus"
  make install
  hash -r
}

function build_ports {
  local cmd_port="port install"

  if [[ "$FLAGS_binary" = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -b"
  fi

  if [[ "$FLAGS_source" = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -s"
  fi

  # macports
  $cmd_port gcc_select
  $cmd_port apple-gcc42
  port 'select' gcc apple-gcc42
  $cmd_port tcl +threads

  # utilities
  $cmd_port figlet wget curl rsync
  $cmd_port watch unrar
  $cmd_port nmap htop
  $cmd_port links
  $cmd_port tcp_wrappers openssh

  # dev languages
  $cmd_port python27 py-distribute
  $cmd_port ruby rb-rubygems
  gem install bundler
  $cmd_port erlang +ssl
  port 'select' python python27

  $cmd_port libyaml

  # dev scm
  $cmd_port mercurial bzr

  # databases
  $cmd_port mysql5 mysql_select

  # dev editors, terminals
  $cmd_port emacs +gtk +x11
  $cmd_port vim +x11 +ruby
  $cmd_port macvim +ruby
  $cmd_port iterm2 
  $cmd_port gitx

  # chat
  $cmd_port irssi 

  # secrets
  $cmd_port gnupg gpg-agent 

  # control
  $cmd_port runit daemontools
  $cmd_port tmux

  # linking
  $cmd_port tnef
  $cmd_port imagemagick

  # x11
  $cmd_port xinit
  $cmd_port xorg-server xmodmap xsetroot xterm xtermcontrol
  $cmd_port xv xpdf xprop xwininfo xdotool
}

function build_xmonad {
  local cmd_port="port"

  if [[ "$FLAGS_binary" = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -b"
  fi

  if [[ "$FLAGS_source " = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -s"
  fi

  if [[ "$FLAGS_clean" = "$FLAGS_TRUE" ]]; then
    rm -rf ~/.ghc ~/.cabal
  fi

  if [[ "$FLAGS_ghc" = "$FLAGS_TRUE" ]]; then
    local tmp_ghc="$(mktemp -d -t XXXXXXXXX)"
    tar xvfz "ghc-7.4.2-src.tar.bz2" -C "$tmp_ghc"
    pushd "$tmp_ghc/ghc-7.4.2"
    ./configure --prefix=$MACPORTS --with-iconv-includes=$MACPORTS/include --with-iconv-libraries=$MACPORTS/lib
    perl -pe 's{(AR_STAGE0 = )/Developer(/usr/bin/ar)}{$1'"$(xcode-select -print-path)"'$2}' -i "mk/config.mk"
    make -j "$FLAGS_cpus" || make -j "$FLAGS_cpus"
    make install
    popd
    rm -rf "$tmp_ghc"
  fi

  local tmp_cabal="$(mktemp -d -t XXXXXXXXX)"
  tar xvfz "cabal-install-0.14.0.tar.gz" -C "$tmp_cabal"
  pushd "$tmp_cabal/cabal-install-0.14.0"
  PATH="$HOME/.cabal:$PATH"
  bash bootstrap.sh 
  cabal update
  cabal install xmonad-0.10
  cabal install xmonad-contrib-0.10
  cabal install xmobar-0.15
  popd
  rm -rf "$tmp_cabal"
}

function build_virtualbox {
  local cmd_port="port"

  if [[ "$FLAGS_binary" = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -b"
  fi

  if [[ "$FLAGS_source " = "$FLAGS_TRUE" ]]; then
    cmd_port="$cmd_port -s"
  fi

  $cmd_port mtools
  $cmd_port rdesktop
  $cmd_port cdrtools
  $cmd_port squid +openssl
}

# build the site with jekyll
function build_jekyll {
  export BUNDLE_GEMFILE="$shome/.doc/Gemfile"

  cd $shome/site
  bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }
  bundle exec jekyll
}

# define command line options:
#   var name, default, description, short option
DEFINE_string 'cpus' '4' 'number of cpus in make' 'n'
DEFINE_boolean 'clean' "$FLAGS_FALSE" 'delete cabal, ghc, macports directories' 'c'
DEFINE_boolean 'update' "$FLAGS_FALSE" 'update cabal' 'u'
DEFINE_boolean 'source' "$FLAGS_FALSE" 'binary macports only' 's'
DEFINE_boolean 'binary' "$FLAGS_FALSE" 'source macports only' 'b'
DEFINE_boolean 'ghc' "$FLAGS_TRUE" 'build ghc' 'G'
DEFINE_string 'install' "$shome/local" 'macports install' 'I'

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
